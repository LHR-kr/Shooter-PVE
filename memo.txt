(캐릭터)
(완)APawn::AddMovementInput
(완)APawn::AddControllerPitchInput
(완)APawn::AddControllerYawInput
(완)ACharacter::Jump

(완)스프링 암의 폰 제어 회전 사용 체크
(완)캐릭터 무브먼트의 폰 회전 확인

addLocalOffset은 location을 직접 움직임, bsweep을 통해 이동 가능 여부도 확인가능, 이번에 사용한 AddMovementInput은 속도에 대한 계산까지 다 처리 함(delta time 곱하는 거)

spring arm 소켓 오프셋? 타깃 오프셋?



시체 콜리전 없앰, 죽은 애들은 DetachFromControllerPendingDestroy()로 컨트롤러 박탈, GetCapsuleComponent()->SetCollisionEnabled(ECollisionEnabled::NoCollision);로 충돌 안 되게 변경


(완)(애니메이션)-------------------------------------
animation blueprint
(완)Blend Space 2D로 블렌딩 된 새로운 애니메이션 만들기
(완)블렌드 스페이스에서 애니메이션이 부적절하게 겹치지 않도록 축을 설정하고 애니메이션 클립을 배치
애니메이션 블루프린트와 캐릭터 블루프린트 연결하기

(완)글로벌 속도 벡터에서 로컬 이동 방향 구하기 
(완)원래 좌표계는 로컬 좌표계에서 글로벌 좌표계로 트랜스폼이 일어난다. 하지만 Inverse Transform 노드를 이용하여 글로벌 좌표계에서 로컬 좌표계로 변환이 가능하다.
(완)GetActorVelocity로 글로벌 속도를 구하고, 이것을 Inverse TransformDirection에 입력하여 로컬 좌표계에서의 이동 방향을 가져온다.
(완)로컬 좌표계에서의 이동방향을 RotatorFromXVector노드에 입력하여 그 이동 방향이 현재 방향에서 얼마나 z축 방향으로 회전하였는지 (Yaw)를 계산한다.

애니메이션 모션이랑 이동 속도랑 안 맞을 수 있다. 애니메이션 프레임을 분석해서 애니메이션의 속도를 구하고 (delta D/dleta T)
블렌딩 스페이스에서 속도 변수 값을 실제 애니메이셔 속도와 유사하게 조절, 그리드를 적절하게 조절한다.

(무기 시스템)-----------------------------------------------------
건 액터를 캐릭터의 자식으로 둘 건데, 액터를 액터의 자식으로 두는게 아니라 자식 액터의 컴포넌트를 부모 액터의 자식으로 두는 것이다.
즉 액터끼리는 계층이 존재하지 않지만, 씬 컴포넌트끼리 계층을 이루어 액터가 계층 구조를 이루는 것처럼 보이는 것이다.

소켓을 이용하여 액터를 다른 액터의 하위로 넣기
스켈레톤 메시에 가서 손목 부분 본에 소켓 추가하기.SpawnActor를 호출하여 총을 생성하고, AActor::AttachToComponent()로 붙인다.

사격 키를 바인딩 할 건데, 바인딩 하는 함수가 Gun의 함수가 아니라 멤버 함수 임을 주의.(AShooterCharacter::SetupPlayerInputComponent 주석 참고)

사격 알고리즘 : 플레이어 뷰포트의 위치 가져오고, 거기서 라인 트레이싱, FCollisionQueryParams으로 라인 트레이싱에 걸리지 않는 액터 설정 (Gun.cpp)
새 트레이스 채널 추가, config 폴더의 default Engine.ini에서 채널 번호 확인, LineTraceSingleByChanner 호출. 
라인 트레이스 위치는 카메라 뷰포트 기준
라인트레이스에 충돌하면 TakeDamage 함수 호출. 이전의 툰탱크와는 다르게 ApplyDamage, OnTakeAnyDamage 이벤트를 호출하는게 아니라 그냥 TakeDamage만 호출

웨폰 스위칭 기능 구현



(완)(인공지능)--------------------------------------------------
AI Controller c++ 클래스와 블루프린트 만들어서 BP_ShooterCharacter의 기본 인공지능 컨트롤러로 지정
AAIController::SetFocus()로 플레이어 바라보게 만들기, AAIController::SetFocus::LineOfSightTo()로 라인 트레이스를 해서 플레이어가 시야에 없으면 움직임 멈춤
nva mesh로 ai 이동하기, 액터 배치 패널 - 볼륨 탭에서 Navmesh Bound Volume 월드에 놓기. 
AAIController::SetFocus::MoveToActor()를 이용해서 플레이어 따라오게 만들기

인공지능 행동트리와 블랙보드로 인공지능 만들기. 블랙보드는 행동트리를 위한 변수를 저장하는 공간이라고 생각하자
BT  시퀀스, 셀렉터, 데코레이터(시퀀스에 기능을 추가해 꾸미는 역할)
커스텀 BT Task 만들기(BT_ClearBlackBoardValue.cpp, BT_Shoot.cpp)
커스텀 BT 서비스 만들기 (UBTService_UpdatePlayerLocation, UBTService_PlayerIsSeen)


(게임 시스템)------------------------------------------------
게임 모드, 플레이어 컨트롤러 상속 받아 게임의 규칙 구현, GameHasEnded() 상속 받아 구현

ui만들기, C++에서 종속성 추가

소리 넣기, 사운드큐로 랜덤하게 소리 재생
소리의 공간화 : 멀어질 수록 소리 작게 나고 (Attenuation) 사플 가능하게  하는 그런 거(Spatialization)

에임 UI 만들기
HP UI 만들기

에디티브 애니메이션

애니메이션 스테이트 머신

액터 패치 패널에서 ambient sound로 배경음 넣기

ai끼리 죽이는 버그 수정 -> 트레이스 채널 추가하고, 콜리전 프리셋 추가, 콜리전 채널 Enum을 그대로 변수로 받지 못함(You cannot Use Raw Enum Name as a Type. Instead, use TEnumAsByte or a C++11 Enum Class with Explicit Underlying Type)
TEnumAsByte<ECollisionChannel> TraceChannel; 로 해야 한다



(완)(최적화)---------------------------------------------------------

fps 높이기 (최적화
점유율 보면 CPU는 40%, GPU는 100% -> gpu 최적화 진행. 
1차 - 라이팅 모빌리티 수정, 게임 중간에 라이팅의 속성이 변하지 않음 pbr(physics based rendering)을 포기-> 무버블을 스테이셔너리로 번경,
스테이셔너리 라이팅 겹침으로 확인은 필수
플레이어가 자주 다니지 않는 길, 주변에 동적 오브젝트가 없는 곳의 라이팅은 static으로 변경, 라이팅 빌드로 미리 베이킹)



Occlusion Culling -최대 드로 디스턴스를 설정하여 멀리 잇는 건 렌더링 되지 않게 설정. 이 게임은 플레이어가 다닐 수 있는 레벨의 구조가 골목처럼 복잡하기 때문에,
멀리 있는 건 어차피 무언가에 의해 가려져서 안 보일 확률이 높다. 그렇기 때문에 렌더링에서 제외한다. 
-> 무언가에 의해 가려지면 애초에 렌더링에서 제외된다. (occulusion culling). 그렇기 때문에 이 맵에서 최대 드로 디스턴스를 이용한 컬링은 크게 도움이 되지 않는다.
FreezeRendering 명령어로 확인 가능

LOD 설정 - 이번 게임에선 골목 같은 형태의 실내라서, 자동으로 컬링이 된다. LOD는 크게 도움이 되지 않는다. 그래도 해 봤다. 메모리는 증가할 수도?
임포스터 베이커 - 빛에 대한 메쉬의 형태를 각도 별로 계산한 다음 스프라이트로 저장, 이렇게 생성된 임포스터 메시를 LOD의 단계로 적용할 수 있다.
즉, 멀리 떨어져 있어 LOD가 적용되는 메쉬를 아예 스프라이트로 미리 만들어 두어 렌더링을 최소화 하는 것이다. 

액터 병합

합계 트라이앵글 수가 100000이 넘어가는 SM_Pipe_Ceiling_B, SM_Cave_Rock_Large_01a, SM_Pipe_Vent, SM_WallBuffer_B, SM_Pipe_Ceiling_C를 대상으로 LOD
배치 개수가 많은 SM_WallBuffer_A, SM_Win_FloorEdge_C, SM_Light_Square, SM_FloorBuffer_B, SM_CeilingEdge_A 에도 LOD 적용


s